buildscript {
	ext.kotlin_version = '1.0.7'
    repositories {
	maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
	mavenCentral()

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "0.9.9.4"
group = "ivorius.mcopts" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mcopts"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    mappings channel: 'snapshot', version: '20200514-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.2.8'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile "com.nhaarman:mockito-kotlin:1.5.0"
}
jar {
    manifest {
 	attributes([
                "Specification-Title": "ivtoolkit",
                "Specification-Vendor": "ivorius",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ivorius",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            //artifact reobfArtifact
            // artifact sourceJar // FIXME Figure out source jar artifact
			}
			mavenCustom(MavenPublication) {
				pom.withXml {
					asNode().appendNode('description', 'Command library for Minecraft')
					asNode().appendNode('url', 'https://github.com/Ivorforce/MCOpts')
				}
				//The publication doesn't know about our dependencies, so we have to manually add them to the pom
				pom.withXml {
					def dependenciesNode = asNode().appendNode('dependencies')

					//Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
					configurations.compile.allDependencies.each {
						if (it.group != null && it.group != "unspecified"
                            && it.name != null && it.name != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
						}
					}
				}
			}
        }
    }
    repositories {
        if (project.hasProperty('mavenUrl')) {
            maven {
                url project."mavenUrl"
                if (project.hasProperty('mavenUser') && project.hasProperty('mavenPassword')) {
                    credentials {
                        username project."mavenUser"
                        password project."mavenPassword"
                    }
                }
            }
        } else {
            mavenLocal()
        }
    }
}